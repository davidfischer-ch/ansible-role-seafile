# This roles has some steps that should be made more generic to handle multi-tier deployment
# https://manual.seafile.com/deploy_pro/download_and_setup_seafile_professional_server/
---

- assert:
    that:
      - seafile_admin_email is defined
      - seafile_admin_password is defined
      - seafile_daemon_mode in seafile_daemon_modes
      - seafile_database_password is defined
      - seafile_domains|length > 0
      - seafile_instance_name is defined
      - seafile_hub_secret_key|length > 16
      - seafile_release_checksum is defined
      - seafile_version is defined
  tags: [seafile, always]

- block:
    - name: Install Seafile packages
      ansible.builtin.package:
        name: '{{ seafile_packages }}'
        state: present

    - name: Download Seafile distribution package
      ansible.builtin.get_url:
        url: '{{ seafile_package_url }}'
        dest: '{{ local_source_directory }}/{{ seafile_package_url|basename }}'
        checksum: '{{ seafile_release_checksum }}'
        force: no
      environment: '{{ seafile_download_environment }}'

    - name: Extract Seafile distribution package
      ansible.builtin.unarchive:
        src: '{{ local_source_directory }}/{{ seafile_package_url|basename }}'
        dest: '{{ local_source_directory }}'
        copy: no
  become: yes
  tags: [seafile, packages]

- block:
    - name: Create Application directories
      ansible.builtin.file:
        name: '{{ item }}'
        owner: '{{ seafile_daemon_user }}'
        group: '{{ seafile_daemon_group }}'
        mode: '755'
        recurse: no
        state: directory
      loop:
        - '{{ seafile_app_directory }}'
        - '{{ seafile_app_directory }}/ccnet'
        - '{{ seafile_app_directory }}/conf'
        - '{{ seafile_data_directory }}'
        - '{{ seafile_log_directory }}'

    - name: Create link to data directory
      ansible.builtin.file:
        src: '{{ seafile_data_directory }}'
        dest: '{{ seafile_app_directory }}/seafile-data'
        owner: '{{ seafile_daemon_user }}'
        group: '{{ seafile_daemon_group }}'
        state: link

  become: yes
  tags: [seafile, config]

# FIXME multi-tier architecture
- name: Setup Application database user
  ansible.builtin.mysql_user:
    name: '{{ seafile_database_user }}'
    append_privs: yes
    host: 127.0.0.1
    password: '{{ seafile_database_password }}'
    priv: '{{ seafile_database_name_prefix }}-{{ item }}.*:ALL'
    state: present
  become: yes
  loop:
    - ccnet
    - seafile
    - seahub
  tags: [seafile, database]

- block:
    - name: Update Application
      ansible.builtin.command: >
        rsync {{ local_source_directory }}/seafile-pro-server-{{ seafile_version }}/
              {{ seafile_app_directory }}/seafile-server/
          --chown {{ seafile_daemon_user }}:{{ seafile_daemon_group }} -og
          --archive --checksum --delete

    - name: Prevent useless DNS lookup
      ansible.builtin.replace:
        name: '{{ seafile_app_directory }}/seafile-server/setup-seafile-mysql.py'
        regexp: socket.gethostbyname\(socket.gethostname\(\)\)
        replace: args.server_ip

    # TODO Install Python dependencies inside a virtualenv
    - block:
        - name: Install Seafile Python packages
          ansible.builtin.pip:
            name: '{{ seafile_python_packages }}'
            executable: '{{ seafile_pip_path }}'
            state: present
            umask: '{{ seafile_pip_umask }}'
          environment: '{{ seafile_pip_environment }}'

        # See https://forum.seafile.com/t/seafile-community-edition-9-0-5-is-ready/16388
        - name: Fix CFFI version mismatch
          ansible.builtin.lineinfile:
            path: '{{ seafile_python_requirements_path }}'
            line: 'cffi=={{ seafile_cffi_version }}'
            regexp: '^cffi=='
          when: seafile_cffi_version|length > 0

        - name: Set CFFI package version in SeaHub ThirdParty directory
          ansible.builtin.pip:
            name: 'cffi=={{ seafile_cffi_version }}'
            executable: '{{ seafile_pip_path }}'
            state: forcereinstall
            umask: '{{ seafile_pip_umask }}'
            extra_args: --target {{ seafile_app_directory }}/seafile-server/seahub/thirdparty
          environment: '{{ seafile_pip_environment }}'
          when: seafile_cffi_version|length > 0

        - name: Install Seafile Python requirements
          ansible.builtin.pip:
            name: '{{ seafile_python_packages }}'
            executable: '{{ seafile_pip_path }}'
            state: present
            umask: '{{ seafile_pip_umask }}'
          environment: '{{ seafile_pip_environment }}'

        - name: Install requirements into virtualenv
          ansible.builtin.pip:
            requirements: '{{ seafile_python_requirements_path }}'
            executable: '{{ seafile_pip_path }}'
            state: forcereinstall
            umask: '{{ seafile_pip_umask }}'
          environment: '{{ seafile_pip_environment }}'
      tags: virtualenv

    - name: Configure Seafile
      ansible.builtin.template:
        src: '{{ seafile_main_config_file }}'
        dest: '{{ seafile_app_directory }}/conf/seafile.conf'
        mode: '644'
      notify: '{{ seafile_daemon_modes[seafile_daemon_mode] }} restart seafile'

    - name: Configure Seafile CCNet
      ansible.builtin.template:
        src: '{{ seafile_ccnet_config_file }}'
        dest: '{{ seafile_app_directory }}/conf/ccnet.conf'
        mode: '644'
      notify:
        - '{{ seafile_daemon_modes[seafile_daemon_mode] }} restart seafile'
        - '{{ seafile_daemon_modes[seafile_daemon_mode] }} restart seahub'

    - name: Configure Seafile DAV
      ansible.builtin.template:
        src: '{{ seafile_dav_config_file }}'
        dest: '{{ seafile_app_directory }}/conf/seafdav.conf'
        mode: '644'
      notify: '{{ seafile_daemon_modes[seafile_daemon_mode] }} restart seahub'

    - name: Configure Seafile Events
      ansible.builtin.template:
        src: '{{ seafile_events_config_file }}'
        dest: '{{ seafile_app_directory }}/conf/seafevents.conf'
        mode: '644'
      notify: '{{ seafile_daemon_modes[seafile_daemon_mode] }} restart seahub'

    - name: Configure SeaHub
      ansible.builtin.template:
        src: '{{ seafile_hub_config_file }}'
        dest: '{{ seafile_app_directory }}/conf/seahub_settings.py'
        mode: '644'
      notify: '{{ seafile_daemon_modes[seafile_daemon_mode] }} restart seahub'

    - name: Set administrator credentials
      ansible.builtin.replace:
        name: '{{ seafile_app_directory }}/seafile-server/check_init_admin.py'
        regexp: '= ask_admin_{{ item.key }}\(\)'
        replace: '= "{{ item.value }}"'
      diff: no
      no_log: yes
      with_dict:
        email: '{{ seafile_admin_email }}'
        password: '{{ seafile_admin_password }}'

    - include_tasks: setup-service-{{ seafile_daemon_mode }}.yml
  become: yes
  tags: [seafile, update]

- name: Start Seafile services
  ansible.builtin.service:
    name: '{{ item }}'
    enabled: yes
    state: started
  become: yes
  loop:
    - seafile
    - seahub
  tags: [seafile, services]
